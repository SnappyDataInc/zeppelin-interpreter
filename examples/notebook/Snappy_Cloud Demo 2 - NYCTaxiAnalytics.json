{"paragraphs":[{"text":"%angular\n<script>\n    function openSnappyPulse(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/dashboard/';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n\n<div style=\"background-color:whitesmoke;\">\n<br>\n <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span>\n<br>\n<a href=\"#/notebook/2ETF88QQF\">Zeppelin Notebook Manager</a>\n<br>\n    \n<h4>Quickstarts</h4>\n&ensp;<a href=\"#/notebook/quickstart\" >Using Spark Scala API</a>\n<br>\n&ensp;<a href=\"#/notebook/2EVF37179\" >Using SQL</a>\n<br>\n&ensp;<a href=\"#/notebook/performance\">Performance Benchmark</a>\n<br>\n\n<h4>External Data Sources </h4>\n&ensp;<a href=\"#/notebook/2EU4EJDHJ\">Load from External Data Sources</a>\n<br>\n&ensp;<a href=\"#/notebook/2EU6ZXZQJ\">Manage Connectors</a>\n<br>\n&ensp;<a href=\"#/notebook/2EUZ88BBY\">Data transformation examples</a>\n<br>\n\n<h4> Structured Streaming </h4>\n&ensp;<a href=\"#/notebook/2EUCAD6QP\">Example using file source</a>\n\n<h4><b> Demos with Big Datasets</b></h4>\n&ensp;<a href=\"#/notebook/airlineanalytics\">Airline Analytics Demo</a>\n<br>\n<!--&ensp;<a href=\"#/notebook/nyctaxianalytics\">NYC Taxi Analytics Demo</a>-->\n&ensp;<b><i>NYC Taxi Analytics Demo</i></b>\n<br>\n&ensp;<a href=\"#/notebook/2DKKFJNZR\">Performance Benchmark(S3 dataset)</a>\n<br>\n\n<h4>References</h4>\n&ensp;<a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/\" target=\"_blank\">ComputeDB documentation</a>\n<br>\n&ensp;<a href=\"https://zeppelin.apache.org/docs/0.8.2/index.html\" target=\"_blank\">Zeppelin Documentation</a>\n</div>\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":2,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<script>\n    function openSnappyPulse(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/dashboard/';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n\n<div style=\"background-color:whitesmoke;\">\n<br>\n <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span>\n<br>\n<a href=\"#/notebook/2ETF88QQF\">Zeppelin Notebook Manager</a>\n<br>\n    \n<h4>Quickstarts</h4>\n&ensp;<a href=\"#/notebook/quickstart\" >Using Spark Scala API</a>\n<br>\n&ensp;<a href=\"#/notebook/2EVF37179\" >Using SQL</a>\n<br>\n&ensp;<a href=\"#/notebook/performance\">Performance Benchmark</a>\n<br>\n\n<h4>External Data Sources </h4>\n&ensp;<a href=\"#/notebook/2EU4EJDHJ\">Load from External Data Sources</a>\n<br>\n&ensp;<a href=\"#/notebook/2EU6ZXZQJ\">Manage Connectors</a>\n<br>\n&ensp;<a href=\"#/notebook/2EUZ88BBY\">Data transformation examples</a>\n<br>\n\n<h4> Structured Streaming </h4>\n&ensp;<a href=\"#/notebook/2EUCAD6QP\">Example using file source</a>\n\n<h4><b> Demos with Big Datasets</b></h4>\n&ensp;<a href=\"#/notebook/airlineanalytics\">Airline Analytics Demo</a>\n<br>\n<!--&ensp;<a href=\"#/notebook/nyctaxianalytics\">NYC Taxi Analytics Demo</a>-->\n&ensp;<b><i>NYC Taxi Analytics Demo</i></b>\n<br>\n&ensp;<a href=\"#/notebook/2DKKFJNZR\">Performance Benchmark(S3 dataset)</a>\n<br>\n\n<h4>References</h4>\n&ensp;<a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/\" target=\"_blank\">ComputeDB documentation</a>\n<br>\n&ensp;<a href=\"https://zeppelin.apache.org/docs/0.8.2/index.html\" target=\"_blank\">Zeppelin Documentation</a>\n</div>"}]},"apps":[],"jobName":"paragraph_1576644046939_644888181","id":"20191206-010233_607610586","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:27512"},{"text":"%angular\n<div style=\"background-color:whitesmoke;\">\n<h2>What does this demo showcase?</h2>\n<p style=\"font-size:14;\">The New York City Taxi & Limousine Commission has released the detailed historical dataset covering over 1.1 billion individual taxi trips in the city from January 2009 through June 2015. In this Analytics demo we only use data for Year 2013. We manage the trip and fare data in two tables (NYC_TAXI_TRIP, TAXI_TRIP_FARE). Each trip contains information like the driver's license info, the pickup and dropoff times and their precise locations, etc. The fare table contains the total charge along with tip amounts for each trip. The schema for the table is below. \nEach table is over a 150 million records and instead of managing all the data in memory we simply create two stratified samples. This requires only a fraction of the memory that would otherwise be required. \n\nIn this demo, we showcase the following:\n<ol>\n<li>Execute the query on the exact data noting the time it takes to parse parquet data and execute the query using Spark parallel processing  (LEFT PARAGRAPHS)</li>\n<li>Execute the same query using <b>Approximate Query Processing (AQP)</b> engine noting both the accuracy and response time of the answer. (RIGHT PARAGRAPHS)</li>\n<li>We illustrate various features: constraining the error in query responses, Automatically swapping the approximate visualized plot with an exact response, projecting error rates as part of the query response and automatic query re-routing to underlying data source when error constraints cannot be satisfied.</li> \n</ol>\n\n<h5><i>NOTE: The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy. Hence, the performance delta with sampling will be proportional to the data set size. </h5>\n<h5 style=\"color:red;font-weight:bold\">Anonymous user needs to clone this notebook to execute the paragraphs. Clone option available in the pane next to name of the notebook at the top of the page.</h5>\n</div>","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true,"completionSupport":false},"colWidth":10,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke;\">\n<h2>What does this demo showcase?</h2>\n<p style=\"font-size:14;\">The New York City Taxi & Limousine Commission has released the detailed historical dataset covering over 1.1 billion individual taxi trips in the city from January 2009 through June 2015. In this Analytics demo we only use data for Year 2013. We manage the trip and fare data in two tables (NYC_TAXI_TRIP, TAXI_TRIP_FARE). Each trip contains information like the driver's license info, the pickup and dropoff times and their precise locations, etc. The fare table contains the total charge along with tip amounts for each trip. The schema for the table is below. \nEach table is over a 150 million records and instead of managing all the data in memory we simply create two stratified samples. This requires only a fraction of the memory that would otherwise be required. \n\nIn this demo, we showcase the following:\n<ol>\n<li>Execute the query on the exact data noting the time it takes to parse parquet data and execute the query using Spark parallel processing  (LEFT PARAGRAPHS)</li>\n<li>Execute the same query using <b>Approximate Query Processing (AQP)</b> engine noting both the accuracy and response time of the answer. (RIGHT PARAGRAPHS)</li>\n<li>We illustrate various features: constraining the error in query responses, Automatically swapping the approximate visualized plot with an exact response, projecting error rates as part of the query response and automatic query re-routing to underlying data source when error constraints cannot be satisfied.</li> \n</ol>\n\n<h5><i>NOTE: The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy. Hence, the performance delta with sampling will be proportional to the data set size. </h5>\n<h5 style=\"color:red;font-weight:bold\">Anonymous user needs to clone this notebook to execute the paragraphs. Clone option available in the pane next to name of the notebook at the top of the page.</h5>\n</div>"}]},"apps":[],"jobName":"paragraph_1576644046946_755180201","id":"20160925-172803_1684905446","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27513"},{"title":"Monitor the cluster, check memory consumption","text":"%angular\n<div style=\"background-color:whitesmoke;\"> <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span> <span><h5> The Dashboard tab in the Monitoring Console can be used to monitor the cluster and check the memory consumed by the samples.</h5></span></div>","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined","colWidth":10,"editorHide":true,"fontSize":9,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke;\"> <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span> <span><h5> The Dashboard tab in the Monitoring Console can be used to monitor the cluster and check the memory consumed by the samples.</h5></span></div>"}]},"apps":[],"jobName":"paragraph_1576644046947_-520700691","id":"20170324-134252_1246434891","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27514"},{"text":"%spark\nz.put(\"aws_id\",z.textbox(\"AWS Access ID\"))\nz.put(\"aws_secret\",z.textbox(\"AWS Secret Key\"))\n\nprintln(s\"\"\"%angular\n <div style=\"color:red;background-color:whitesmoke;\">\n            <li><b>Access Credentials</b></li>\n            <ul>\n                <li>Please refer to security credentials guidelines.<b>[FIXME: Extend product documentation to have security guidelines for cloud data sources.]</b></li>\n                <li>The Zeppelin notebooks store state to disk. Using credentials via notebooks will result in them being written to disk. More about Zeppelin storage options is available <a href=\"https://zeppelin.apache.org/docs/0.8.0/setup/storage/storage.html\">here</a></li>\n                <li>If user still chooses to use notebooks as the mode of setting credentials, then user may clone this notebook and delete it immediately after completing use.</li>\n            </ul></div>\"\"\")\nz.run(\"20191206-005155_296046020\")","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{"AWS Access ID":"","AWS Secret Key":""},"forms":{"AWS Access ID":{"type":"TextBox","name":"AWS Access ID","displayName":"AWS Access ID","defaultValue":"","hidden":false,"$$hashKey":"object:27812"},"AWS Secret Key":{"type":"TextBox","name":"AWS Secret Key","displayName":"AWS Secret Key","defaultValue":"","hidden":false,"$$hashKey":"object:27813"}}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":" <div style=\"color:red;background-color:whitesmoke;\">\n            <li><b>Access Credentials</b></li>\n            <ul>\n                <li>Please refer to security credentials guidelines.<b>[FIXME: Extend product documentation to have security guidelines for cloud data sources.]</b></li>\n                <li>The Zeppelin notebooks store state to disk. Using credentials via notebooks will result in them being written to disk. More about Zeppelin storage options is available <a href=\"https://zeppelin.apache.org/docs/0.8.0/setup/storage/storage.html\">here</a></li>\n                <li>If user still chooses to use notebooks as the mode of setting credentials, then user may clone this notebook and delete it immediately after completing use.</li>\n            </ul></div>\n"}]},"apps":[],"jobName":"paragraph_1576644046947_-1032440786","id":"20191206-010701_376676435","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27515"},{"title":"[Auto run]","text":"%jdbc\nexec scala\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", \"{aws_id}\")\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", \"{aws_secret}\")","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":true,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":true,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{"AWS access ID":"testID","AWS secret key":"testsec","aws_secret":""},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"C0\n"}]},"apps":[],"jobName":"paragraph_1576644046948_-1569813867","id":"20191206-005155_296046020","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27516"},{"title":"Let's load the data from S3 and create Stratified Samples (RUN THIS PARA ONCE)","text":"%jdbc\n-- If launched using cloud service, the Snappydata DB would automatically resurrect the samples from disk. \n-- But, we still need to re-create Spark External tables so we have access to the FULL source data. \n-- CHECK http://localhost:5050/Snappy%20Store/ IF THE SAMPLES ARE ALREADY CREATED\n\nDROP TABLE IF EXISTS NYCTAXI_pickuptime_sample;\nDROP TABLE IF EXISTS TAXIFARE_hackLicense_sample;\n\nDROP TABLE IF EXISTS NYC_TAXI_TRIP ;\nDROP TABLE IF EXISTS TAXI_TRIP_FARE;\n\n-- Commented as samples are recovered from disk on cluster startup\n\n-- Spark SQL syntax to create tables with data in S3 (you can load from many disparate sources in Spark)\n-- External tables are registered  with Spark catalog and must be created each time the cluster is started.\nCREATE EXTERNAL TABLE NYC_TAXI_TRIP USING parquet OPTIONS(path 's3a://computedb-test-data/nytaxitripdata_cleaned');\nCREATE EXTERNAL TABLE TAXI_TRIP_FARE USING parquet OPTIONS(path 's3a://computedb-test-data/nyctaxifaredata_cleaned');\n\n-- You can also host the entire table in memory by removing the 'EXTERNAL' keyword assuming you have the memory available.\n-- For loading from other sources, checkout the Spark SQL guide here(LINK)\n\n-- Create 1% sample on hour(pickuptime). i.e. we have enough samples for each hour of the day\nCREATE SAMPLE TABLE NYCTAXI_pickuptime_sample ON NYC_TAXI_TRIP  OPTIONS (qcs 'hour(pickup_datetime)', fraction '0.01', persistent 'sync') AS (SELECT * FROM NYC_TAXI_TRIP);\n-- Create 1% sample on hack_license. There are about 20K hack_licenses (drivers) and we want to extract samples for each driver. \nCREATE SAMPLE TABLE TAXIFARE_hackLicense_sample on TAXI_TRIP_FARE OPTIONS (qcs 'hack_license', fraction '0.01', persistent 'sync') AS (SELECT * FROM TAXI_TRIP_FARE);\n\n\n-- Counts\nSELECT COUNT(*) FROM NYCTAXI_pickuptime_sample;\nSELECT COUNT(*) FROM TAXIFARE_hacklicense_sample;\n\n-- Checkout Pulse (link above) and the storage tab for the space consumed by the samples\nSELECT 'Data loaded';\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Data loaded":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"iSight initialized","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"iSight initialized","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046949_1009330020","id":"20160913-064343_1431994890","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27517"},{"title":"Schema for the table NYC_TAXI_TRIP","text":"%jdbc\nexec scala\nsnappy.table(\"nyc_taxi_trip\").printSchema","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- medallion: string (nullable = true)\n |-- hack_license: string (nullable = true)\n |-- vendor_id: string (nullable = true)\n |-- rate_code: integer (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- pickup_datetime: string (nullable = true)\n |-- dropoff_datetime: string (nullable = true)\n |-- passenger_count: integer (nullable = true)\n |-- trip_time_in_secs: integer (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- pickup_longitude: double (nullable = true)\n |-- pickup_latitude: double (nullable = true)\n |-- dropoff_longitude: double (nullable = true)\n |-- dropoff_latitude: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1576644046949_1003300725","id":"20161009-005031_439909397","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27518"},{"title":"Comparing the number of records in base table and Sample table","text":"%md\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"title":true,"results":{},"enabled":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046950_1973168554","id":"20160913-102730_397816573","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27519"},{"title":"How many rows in the Trip table?","text":"%jdbc\n-- Fetch count\n\n\nselect count(*) count from nyc_taxi_trip;","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"COUNT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"COUNT","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"COUNT","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046951_1875638470","id":"20160913-102635_482610975","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27520"},{"title":"How many rows using AQP? Actual count in sample?","text":"%jdbc\n-- Fetch count. count(*) is the estimate. 'sample_count' is built-in alias to showing the actual number of records\n-- in the selected sample 'with error 0.1' - allow a maximum of 10% error in the answer. \n\nselect count(*) count, count(*) sample_count from nyc_taxi_trip with error 0.1 ;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"COUNT":"string","SAMPLE_COUNT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"COUNT","index":0,"aggr":"sum"}],"values":[{"name":"SAMPLE_COUNT","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"COUNT","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046951_393686221","id":"20160913-102147_1078513643","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27521"},{"text":"%md\n### Comparing the ride per week","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Comparing the ride per week</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1576644046952_2081933870","id":"20160928-172922_2055212016","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27522"},{"title":"Number of Rides per week","text":"%jdbc\n\nselect count(*) numOfRides, weekofyear(pickup_datetime) from nyc_taxi_trip \ngroup by weekofyear(pickup_datetime);\n\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"weekofyear(CAST(PICKUP_DATETIME AS DATE))","index":1,"aggr":"sum"}],"values":[{"name":"NUMOFRIDES","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"NUMOFRIDES","index":0,"aggr":"sum"},"yAxis":{"name":"weekofyear(CAST(PICKUP_DATETIME AS DATE))","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046952_-925393418","id":"20160913-103717_1785005943","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27523"},{"title":"Number of Rides per week  (Use AQP)","text":"%jdbc \n\n-- 'With error 0.1' - allow 10% error and if cannot be met run against full table\nselect count(*) numOfRides, weekofyear(pickup_datetime) from nyc_taxi_trip \ngroup by weekofyear(pickup_datetime) with error 0.1;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"weekofyear(CAST(PICKUP_DATETIME AS DATE))","index":1,"aggr":"sum"}],"values":[{"name":"NUMOFRIDES","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"NUMOFRIDES","index":0,"aggr":"sum"},"yAxis":{"name":"weekofyear(CAST(PICKUP_DATETIME AS DATE))","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046953_-1339515972","id":"20160913-104339_26190446","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27524"},{"text":"%md\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046953_1346566357","id":"20160928-040939_194085087","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27525"},{"title":" What are the worst times of day to take a cab from midtown to JFK airport?","text":"%jdbc\n\n-- A more selective query: filtered on two locations in manhattan\n\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) hr, count(*) howManyTrips from nyc_taxi_trip where \nround(pickup_latitude,2) >= round(40.754931,2) and \n round(pickup_longitude,2) <= round(-73.974019,2) and \nround(pickup_latitude,2) <= round(40.757321,2) and  \nround(pickup_longitude,2) >= round(-73.995194,2) and \nround(dropoff_latitude,2) >= round(40.632471,2) and \nround(dropoff_longitude,2) <= round(-73.765469,2) and \nround(dropoff_latitude,2) <= round(40.660735,2) and \n round(dropoff_longitude,2) >= round(-73.799458,2) \ngroup by  hour(pickup_datetime) order by hr;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"HR","index":1,"aggr":"sum"}],"values":[{"name":"TRIPTIME","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TRIPTIME","index":0,"aggr":"sum"},"yAxis":{"name":"HR","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046954_-1943960515","id":"20160913-105109_332811400","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27526"},{"title":" What are the worst times of day to take a cab from midtown to JFK airport?   (Use AQP)","text":"%jdbc\n-- Note the directive 'with error' so we get and approximate answer\n\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) hr, count(*) howManyTrips from nyc_taxi_trip where \nround(pickup_latitude,2) >= round(40.754931,2) and \nround(pickup_longitude,2) <= round(-73.974019,2) and \nround(pickup_latitude,2) <= round(40.757321,2) and  \nround(pickup_longitude,2) >= round(-73.995194,2) and \nround(dropoff_latitude,2) >= round(40.632471,2) and \nround(dropoff_longitude,2) <= round(-73.765469,2) and \nround(dropoff_latitude,2) <= round(40.660735,2) and \n round(dropoff_longitude,2) >= round(-73.799458,2) \ngroup by  hour(pickup_datetime) order by hr with error;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"HR","index":1,"aggr":"sum"}],"values":[{"name":"TRIPTIME","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TRIPTIME","index":0,"aggr":"sum"},"yAxis":{"name":"HR","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046954_588505208","id":"20160913-105108_1325523020","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27527"},{"text":"%md\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046954_393782726","id":"20160928-041044_1557092045","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27528"},{"title":"How does ridership change over months?","text":"%jdbc\n-- Query will take more than 20 seconds. And, this is just one year's data.\n\nselect count(*) numOfRides,CASE \nWHEN month(pickup_datetime) = 1 THEN 'Jan' \nWHEN month(pickup_datetime) = 2 THEN 'Feb' \nWHEN month(pickup_datetime) = 3 THEN 'Mar' \nWHEN month(pickup_datetime) = 4 THEN 'Apr' \nWHEN month(pickup_datetime) = 5 THEN 'May' \nWHEN month(pickup_datetime) = 6 THEN 'Jun'\nWHEN month(pickup_datetime) = 7 THEN 'Jul' \nWHEN month(pickup_datetime) = 8 THEN 'Aug' \nWHEN month(pickup_datetime) = 9 THEN 'Sep' \nWHEN month(pickup_datetime) = 10 THEN 'Oct' \nWHEN month(pickup_datetime) = 11 THEN 'Nov' \nWHEN month(pickup_datetime) = 12 THEN 'Dec'\nEND AS mnt from nyc_taxi_trip group by month(pickup_datetime) \norder by month(pickup_datetime);\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"MNT","index":1,"aggr":"sum"}],"values":[{"name":"NUMOFRIDES","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"NUMOFRIDES","index":0,"aggr":"sum"}},"lineWithFocus":false,"forceY":false,"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046955_-1493363234","id":"20160913-102929_1633634550","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27529"},{"title":"How does ridership change over months? (Use AQP) ","text":"%jdbc\n-- Run the same query but we can tolerate a 10% error ('with error 0.1')\n-- 'behavior 'do_nothing' instructs snappydata to take no action even when error constraint is not met. See docs for details. \n\nselect count(*) numOfRides,relative_error(numOFRides), CASE \nWHEN month(pickup_datetime) = 1 THEN concat('Jan', 'a')\nWHEN month(pickup_datetime) = 2 THEN 'Feb' \nWHEN month(pickup_datetime) = 3 THEN 'Mar' \nWHEN month(pickup_datetime) = 4 THEN 'Apr' \nWHEN month(pickup_datetime) = 5 THEN 'May' \nWHEN month(pickup_datetime) = 6 THEN 'Jun'\nWHEN month(pickup_datetime) = 7 THEN 'Jul' \nWHEN month(pickup_datetime) = 8 THEN 'Aug' \nWHEN month(pickup_datetime) = 9 THEN 'Sep' \nWHEN month(pickup_datetime) = 10 THEN 'Oct' \nWHEN month(pickup_datetime) = 11 THEN 'Nov' \nWHEN month(pickup_datetime) = 12 THEN 'Dec'\nEND AS mnt from nyc_taxi_trip group by month(pickup_datetime) \norder by month(pickup_datetime) with error 0.1 behavior 'do_nothing' ;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"MNT","index":2,"aggr":"sum"}],"values":[{"name":"NUMOFRIDES","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"NUMOFRIDES","index":0,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046955_1618127268","id":"20160913-102900_344385570","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27530"},{"text":"","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046955_1922303458","id":"20160927-220843_304311260","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27531"},{"title":"How long does it take to ride from Midtown to Downtown?","text":"%jdbc\n\n-- Another selective query\n\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) as hour from nyc_taxi_trip where pickup_latitude < 40.767588 and pickup_latitude > 40.749775 and pickup_longitude > -74.001632 and  pickup_longitude < -73.974595 and dropoff_latitude > 40.716800     and  dropoff_latitude <  40.717776 and dropoff_longitude >  -74.017682 and dropoff_longitude < -74.000945 group by  hour(pickup_datetime) order by hour(pickup_datetime);\n\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"TRIPTIME":"string","HOUR":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"HOUR","index":1,"aggr":"sum"}],"values":[{"name":"TRIPTIME","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TRIPTIME","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046956_-787240688","id":"20160913-104647_1842940668","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27532"},{"title":"How long does it take to ride from Midtown to Downtown?  (Use AQP)","text":"%jdbc \n\n-- Absolute_error function provides a +/- error estimate \n-- 'with error' with no constraint indicates we can tolerate any error rate.\nselect avg(trip_time_in_secs/60) tripTime, hour(pickup_datetime) as hour, absolute_error(tripTime) from nyc_taxi_trip where pickup_latitude < 40.767588 and pickup_latitude > 40.749775 and pickup_longitude > -74.001632 and  pickup_longitude < -73.974595 and dropoff_latitude > 40.716800     and  dropoff_latitude <  40.717776 and dropoff_longitude >  -74.017682 and dropoff_longitude < -74.000945 group by hour(pickup_datetime) order by hour(pickup_datetime) with error;\n\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"TRIPTIME":"string","HOUR":"string","Absolute_Error(TRIPTIME)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"HOUR","index":1,"aggr":"sum"}],"values":[{"name":"TRIPTIME","index":0,"aggr":"sum"},{"name":"Absolute_Error(TRIPTIME)","index":2,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TRIPTIME","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576644046956_1061673662","id":"20160913-104646_1938915458","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27533"},{"text":"%md\n## Queries on Fare table","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Queries on Fare table</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1576644046956_967490273","id":"20160927-220927_974574372","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27534"},{"title":"What are the most common tip percentages in NYC for rides?","text":"%jdbc\n\n\n-- Try switching payment types from CRD to CSH for credit card vs Cash tips\n-- Most pay no tip when using cash. Hmm!\nSELECT (ROUND( (tip_amount / fare_amount) * 100 )) tip_pct, avg(fare_amount), count(*) trips\nFROM taxi_trip_fare WHERE payment_type = ${Select paymentType ='CRD','CRD'|'CSH'} and fare_amount > 0.00 and tip_amount < 50\nGROUP BY (ROUND( tip_amount / fare_amount * 100 ))\nORDER BY (ROUND( tip_amount / fare_amount * 100 )) limit 30;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"TIP_PCT","index":0,"aggr":"sum"}],"values":[{"name":"TRIPS","index":2,"aggr":"sum"},{"name":"avg(FARE_AMOUNT)","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TIP_PCT","index":0,"aggr":"sum"},"yAxis":{"name":"avg(FARE_AMOUNT)","index":1,"aggr":"sum"}}}}],"enabled":true,"runOnSelectionChange":true},"settings":{"params":{"paymentType":"'CRD'","Select paymentType":"'CRD'"},"forms":{"Select paymentType":{"type":"Select","options":[{"value":"'CRD'","$$hashKey":"object:28109"},{"value":"'CSH'","$$hashKey":"object:28110"}],"name":"Select paymentType","defaultValue":"'CRD'","hidden":false,"$$hashKey":"object:28097"}}},"apps":[],"jobName":"paragraph_1576644046957_-762766033","id":"20160913-110707_798631377","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27535"},{"title":"What are the most common tip percentages in NYC for rides?  (Use AQP)","text":"%jdbc\n\n-- Payment type : 'CSH'(cash), 'CRD'(credit card), 'DIS'...\nSELECT (ROUND( (tip_amount / fare_amount) * 100 )) tip_pct, avg(fare_amount), count(*) trips\nFROM taxi_trip_fare WHERE \npayment_type = ${Select paymentType ='CRD','CRD'|'CSH'}\n and fare_amount > 0.00 and tip_amount < 50\nGROUP BY (ROUND( tip_amount / fare_amount * 100 ))\nORDER BY (ROUND( tip_amount / fare_amount * 100 )) limit 30 with error ;\n","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"TIP_PCT","index":0,"aggr":"sum"}],"values":[{"name":"TRIPS","index":2,"aggr":"sum"},{"name":"avg(FARE_AMOUNT)","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TIP_PCT","index":0,"aggr":"sum"}}}}],"enabled":true,"runOnSelectionChange":true},"settings":{"params":{"paymentType":"'CRD'","payment_type":"CRD","fields":[],"paymentType in 'CRD'":"","Select paymentType":"'CRD'"},"forms":{"Select paymentType":{"type":"Select","options":[{"value":"'CRD'","$$hashKey":"object:28137"},{"value":"'CSH'","$$hashKey":"object:28138"}],"name":"Select paymentType","defaultValue":"'CRD'","hidden":false,"$$hashKey":"object:28125"}}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.sql.SQLException: (SQLState=42000 Severity=30000) (Server=localhost/127.0.0.1[1528] Thread=ThriftProcessor-0) Syntax error or analysis exception: Table or view not found: taxi_trip_fare;\n\tat io.snappydata.thrift.SnappyDataService$execute_result$execute_resultStandardScheme.read(SnappyDataService.java:7033)\n\tat io.snappydata.thrift.SnappyDataService$execute_result$execute_resultStandardScheme.read(SnappyDataService.java:7010)\n\tat io.snappydata.thrift.SnappyDataService$execute_result.read(SnappyDataService.java:6949)\n\tat io.snappydata.org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:86)\n\tat io.snappydata.thrift.SnappyDataService$Client.recv_execute(SnappyDataService.java:256)\n\tat io.snappydata.thrift.SnappyDataService$Client.execute(SnappyDataService.java:239)\n\tat io.snappydata.thrift.internal.ClientService.execute(ClientService.java:923)\n\tat io.snappydata.thrift.internal.ClientStatement.execute(ClientStatement.java:739)\n\tat io.snappydata.thrift.internal.ClientStatement.execute(ClientStatement.java:390)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:718)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:801)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:103)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:632)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:188)\n\tat org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java:162)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.rmi.ServerException: Server STACK: java.sql.SQLSyntaxErrorException(42000): Syntax error or analysis exception: Table or view not found: taxi_trip_fare;\n\tat com.pivotal.gemfirexd.internal.iapi.error.StandardException.newException(StandardException.java:214)\n\tat com.pivotal.gemfirexd.internal.engine.Misc.processFunctionException(Misc.java:830)\n\tat com.pivotal.gemfirexd.internal.engine.Misc.processFunctionException(Misc.java:811)\n\tat com.pivotal.gemfirexd.internal.engine.sql.execute.SnappySelectResultSet.setup(SnappySelectResultSet.java:294)\n\tat com.pivotal.gemfirexd.internal.engine.distributed.message.GfxdFunctionMessage.executeFunction(GfxdFunctionMessage.java:317)\n\tat com.pivotal.gemfirexd.internal.engine.distributed.message.GfxdFunctionMessage.executeFunction(GfxdFunctionMessage.java:259)\n\tat com.pivotal.gemfirexd.internal.engine.sql.execute.SnappyActivation.executeOnLeadNode(SnappyActivation.java:340)\n\tat com.pivotal.gemfirexd.internal.engine.sql.execute.SnappyActivation.executeWithResultSet(SnappyActivation.java:205)\n\tat com.pivotal.gemfirexd.internal.engine.sql.execute.SnappyActivation.execute(SnappyActivation.java:161)\n\tat com.pivotal.gemfirexd.internal.impl.sql.GenericActivationHolder.execute(GenericActivationHolder.java:462)\n\tat com.pivotal.gemfirexd.internal.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:586)\n\tat com.pivotal.gemfirexd.internal.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:2181)\n\tat com.pivotal.gemfirexd.internal.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:1289)\n\tat com.pivotal.gemfirexd.internal.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:1006)\n\tat com.pivotal.gemfirexd.internal.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:972)\n\tat io.snappydata.thrift.server.SnappyDataServiceImpl.execute(SnappyDataServiceImpl.java:1713)\n\tat io.snappydata.thrift.SnappyDataService$Processor$execute.getResult(SnappyDataService.java:1511)\n\tat io.snappydata.thrift.SnappyDataService$Processor$execute.getResult(SnappyDataService.java:1495)\n\tat org.apache.thrift.ProcessFunction.process(ProcessFunction.java:39)\n\tat io.snappydata.thrift.server.SnappyDataServiceImpl$Processor.process(SnappyDataServiceImpl.java:201)\n\tat io.snappydata.thrift.server.SnappyThriftServerThreadPool$WorkerProcess.run(SnappyThriftServerThreadPool.java:270)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.snappydata.thrift.server.SnappyThriftServer$1.lambda$newThread$0(SnappyThriftServer.java:143)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.pivotal.gemfirexd.internal.engine.jdbc.GemFireXDRuntimeException: myID: 127.0.0.1(23901)<v1>:31191, caused by ERROR 42000: Syntax error or analysis exception: Table or view not found: taxi_trip_fare;\n\tat com.pivotal.gemfirexd.internal.engine.distributed.GfxdQueryStreamingResultCollector$Itr.moveNext(GfxdQueryStreamingResultCollector.java:451)\n\tat com.pivotal.gemfirexd.internal.engine.distributed.GfxdQueryStreamingResultCollector$Itr.<init>(GfxdQueryStreamingResultCollector.java:363)\n\tat com.pivotal.gemfirexd.internal.engine.distributed.GfxdQueryStreamingResultCollector.iterator(GfxdQueryStreamingResultCollector.java:207)\n\tat com.pivotal.gemfirexd.internal.engine.sql.execute.SnappySelectResultSet.setup(SnappySelectResultSet.java:288)\n\t... 21 more\nCaused by: ERROR 42000: Syntax error or analysis exception: Table or view not found: taxi_trip_fare;\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.iapi.error.StandardException.newException(StandardException.java:473)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.message.LeadNodeExecutorMsg.getExceptionToSendToServer(LeadNodeExecutorMsg.java:220)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.message.LeadNodeExecutorMsg.execute(LeadNodeExecutorMsg.java:140)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.message.GfxdFunctionMessage.processMessage(GfxdFunctionMessage.java:724)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.GfxdMessage.basicProcess(GfxdMessage.java:406)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.internal.cache.AbstractOperationMessage.process(AbstractOperationMessage.java:221)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:431)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:503)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:728)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1176)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in java.lang.Thread.run(Thread.java:748)\n\tat com.pivotal.gemfirexd.internal.iapi.error.StandardException.fixUpRemoteException(StandardException.java:162)\n\tat com.pivotal.gemfirexd.internal.engine.Misc.processFunctionException(Misc.java:829)\n\tat com.pivotal.gemfirexd.internal.engine.Misc.processFunctionException(Misc.java:811)\n\tat com.pivotal.gemfirexd.internal.engine.sql.execute.SnappySelectResultSet.setup(SnappySelectResultSet.java:294)\n\t... 21 more\nCaused by: com.pivotal.gemfirexd.internal.engine.distributed.message.LeadNodeExecutorMsg$SparkExceptionWrapper: org.apache.spark.sql.AnalysisException: Table or view not found: taxi_trip_fare;\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveRelations$$lookupTableFromCatalog(Analyzer.scala:460)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$apply$8.applyOrElse(Analyzer.scala:479)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$apply$8.applyOrElse(Analyzer.scala:464)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:61)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:61)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:60)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:305)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:305)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:305)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:305)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:305)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:305)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.apply(Analyzer.scala:464)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.apply(Analyzer.scala:454)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:85)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:82)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:124)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in scala.collection.immutable.List.foldLeft(List.scala:84)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:82)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:74)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in scala.collection.immutable.List.foreach(List.scala:381)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:74)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.internal.AQPQueryAnalyzer.org$apache$spark$sql$internal$AQPQueryAnalyzer$$super$execute(SnappyAQPSessionState.scala:242)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.internal.AQPQueryAnalyzer$$anonfun$10.apply(SnappyAQPSessionState.scala:242)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.internal.AQPQueryAnalyzer$$anonfun$10.apply(SnappyAQPSessionState.scala:242)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in scala.util.Try$.apply(Try.scala:192)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.internal.AQPQueryAnalyzer.execute(SnappyAQPSessionState.scala:242)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.internal.AQPQueryAnalyzer.execute(SnappyAQPSessionState.scala:230)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:69)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:67)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:50)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.SnappySession.executePlan(SnappySession.scala:220)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.SnappySession$.sqlPlan(SnappySession.scala:2493)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.SnappySession$$anonfun$sqInternal$1.apply(SnappySession.scala:191)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.SnappySession$$anonfun$sqInternal$1.apply(SnappySession.scala:191)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.SnappyContextFunctions.sql(SnappyContextFunctions.scala:94)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.SnappySession.sqInternal(SnappySession.scala:191)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in org.apache.spark.sql.collection.Utils$.sqlInternal(Utils.scala:815)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in io.snappydata.gemxd.SparkSQLExecuteImpl.<init>(SparkSQLExecuteImpl.scala:85)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in io.snappydata.gemxd.ClusterCallbacksImpl$.getSQLExecute(ClusterCallbacksImpl.scala:100)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.execution.SQLLeadNodeExecutionObject.getSparkSQlExecute(SQLLeadNodeExecutionObject.java:65)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.message.LeadNodeExecutorMsg.execute(LeadNodeExecutorMsg.java:128)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.message.GfxdFunctionMessage.processMessage(GfxdFunctionMessage.java:724)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.pivotal.gemfirexd.internal.engine.distributed.GfxdMessage.basicProcess(GfxdMessage.java:406)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.internal.cache.AbstractOperationMessage.process(AbstractOperationMessage.java:221)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:431)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:503)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:728)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in com.gemstone.gemfire.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1176)\n\tat Remote Member '127.0.0.1(24131)<v2>:40464' in java.lang.Thread.run(Thread.java:748)\n\n\tat io.snappydata.thrift.common.ThriftExceptionUtil.newSQLException(ThriftExceptionUtil.java:109)\n\tat io.snappydata.thrift.internal.ClientStatement.execute(ClientStatement.java:755)\n\t... 16 more\n"}]},"apps":[],"jobName":"paragraph_1576644046957_1253144326","id":"20160913-110616_1099195513","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27536"},{"text":"%angular\n<div style=\"background-color:whitesmoke\">\n<h2> Try your own queries below ....</h2>\n<h3>You can always share your thoughts/questions or just encourage us at <a href=\"http://www.snappydata.io/community\" target=\"_blank\"> http://www.snappydata.io/community </a></h3>\n(You can use <a href=\"http://snappydata-slackin.herokuapp.com/\" target=\"_blank\">slack</a>,<a href=\"https://gitter.im/SnappyDataInc/snappydata\" target=\"_blank\">Gitter</a>,<a href=\"http://stackoverflow.com/questions/tagged/snappydata\" target=\"_blank\">stackoverflow </a>, or <a href=\"https://groups.google.com/forum/#!forum/snappydata-user\" target=\"_blank\">google groups</a>) <br> Or, just send an email to chomp@snappydata.io\n</div>","user":"anonymous","dateUpdated":"2019-12-18T10:10:46+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke\">\n<h2> Try your own queries below ....</h2>\n<h3>You can always share your thoughts/questions or just encourage us at <a href=\"http://www.snappydata.io/community\" target=\"_blank\"> http://www.snappydata.io/community </a></h3>\n(You can use <a href=\"http://snappydata-slackin.herokuapp.com/\" target=\"_blank\">slack</a>,<a href=\"https://gitter.im/SnappyDataInc/snappydata\" target=\"_blank\">Gitter</a>,<a href=\"http://stackoverflow.com/questions/tagged/snappydata\" target=\"_blank\">stackoverflow </a>, or <a href=\"https://groups.google.com/forum/#!forum/snappydata-user\" target=\"_blank\">google groups</a>) <br> Or, just send an email to chomp@snappydata.io\n</div>"}]},"apps":[],"jobName":"paragraph_1576644046958_151139607","id":"20170324-134332_252144791","dateCreated":"2019-12-18T10:10:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27537"}],"name":"Snappy/Cloud Demo 2 - NYCTaxiAnalytics","id":"2EXA8MZDA","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}