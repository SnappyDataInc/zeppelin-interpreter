{"paragraphs":[{"text":"%snappydata\n\nprintln(\"%html <h4> This notebook allows you to register external data sets sourced from files.</h4>\")\n\nprintln(\"%html <h4>We support the following sources: S3, HDFS, GCS, Azure, local file system and the following formats: CSV, Text, JSON, Parquet, ORC, XML and AVRO. </h4>\")","user":"anonymous","dateUpdated":"2018-05-29T18:28:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4> This notebook allows you to register external data sets sourced from files.</h4>\n"},{"type":"HTML","data":"<h4>We support the following sources: S3, HDFS, GCS, Azure, local file system and the following formats: CSV, Text, JSON, Parquet, ORC, XML and AVRO. </h4>\n"}]},"apps":[],"jobName":"paragraph_1527099786005_-1752423182","id":"20180523-182306_1939739509","dateCreated":"2018-05-23T18:23:06+0000","dateStarted":"2018-05-29T18:28:27+0000","dateFinished":"2018-05-29T18:28:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5458"},{"title":"STEP 1: Select the source of the files and the data format","text":"%snappydata\n\nprintln(\"%html <h4> Specify Dataset name(<b>registered as External table</b>), Source of files (S3, GCS, HDFS or local files), File format (CSV, JSON, Text..) </h4>\")\n\n//var dataFormat: Any = _\n// this curly brackets around block of code prevents all the REPL output from being displayed ...\n{\nval datasetName = z.input(\"Name the dataset being created:\", \"InvalidName\").asInstanceOf[String]\nval source = z.select(\"Select file source\", Seq((\"0\", \"None\"),\n                                    (\"1\",\"HDFS\"),\n                                    (\"2\",\"S3\"),\n                                    (\"3\",\"local Files\"),\n                                    (\"4\",\"GCS\"),\n                                    (\"5\",\"Azure Store\"))).asInstanceOf[String]\n\n  z.put(\"datasetName\", datasetName)\n  z.put(\"source\", source)\n  \n  val dataFormat = z.select(\"Data format\", Seq((\"CSV\",\"CSV\"),(\"Parquet\",\"Parquet\"),(\"JSON\",\"JSON\")))\n  z.put(\"dataFormat\", dataFormat)\nif (source != \"0\") {\n  z.run(\"20180507-214355_143278230\")\n}\n}\n","user":"anonymous","dateUpdated":"2018-05-29T18:28:51+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"runOnSelectionChange":true,"title":true,"results":{},"enabled":true},"settings":{"params":{"day":"2","Select file source":"2","S3 access ID":"AKIAILHSQ3FINHV473RQ","S3 access secret":"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","S3 bucket location":"zeppelindemo/airportdata_csv","Name the dataset being created:":"Airline","Data format":"Parquet"},"forms":{"Name the dataset being created:":{"name":"Name the dataset being created:","displayName":"Name the dataset being created:","type":"input","defaultValue":"InvalidName","hidden":false,"$$hashKey":"object:5671"},"Select file source":{"name":"Select file source","displayName":"Select file source","type":"select","defaultValue":"","options":[{"value":"0","displayName":"None","$$hashKey":"object:5690"},{"value":"1","displayName":"HDFS","$$hashKey":"object:5691"},{"value":"2","displayName":"S3","$$hashKey":"object:5692"},{"value":"3","displayName":"local Files","$$hashKey":"object:5693"},{"value":"4","displayName":"GCS","$$hashKey":"object:5694"},{"value":"5","displayName":"Azure Store","$$hashKey":"object:5695"}],"hidden":false,"$$hashKey":"object:5672"},"Data format":{"name":"Data format","displayName":"Data format","type":"select","defaultValue":"","options":[{"value":"CSV","displayName":"CSV","$$hashKey":"object:5700"},{"value":"Parquet","displayName":"Parquet","$$hashKey":"object:5701"},{"value":"JSON","displayName":"JSON","$$hashKey":"object:5702"}],"hidden":false,"$$hashKey":"object:5673"}}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4> Specify Dataset name(<b>registered as External table</b>), Source of files (S3, GCS, HDFS or local files), File format (CSV, JSON, Text..) </h4>\n"}]},"apps":[],"jobName":"paragraph_1525901513716_768694905","id":"20180507-215201_1754631266","dateCreated":"2018-05-09T21:31:53+0000","dateStarted":"2018-05-29T18:28:51+0000","dateFinished":"2018-05-29T18:28:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5459"},{"title":"STEP 2: Supply access credentials, options for Access","text":"%snappydata\n\n{\nimport org.apache.spark.sql._\n\n//println(\"%html <h4> Add instructions here ... </h4>\")\n\nvar df: DataFrame = null\nval source = z.get(\"source\")\nif (source == \"2\") {\n  val id = z.input(\"S3 access ID\",\"AKIAILHSQ3FINHV473RQ\")\n  val secret = z.input(\"S3 access secret\", \"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\")\n  val bucket = z.input(\"S3 bucket location\", \"zeppelindemo/airportdata\")\n  \n  if(z.get(\"dataFormat\") == \"CSV\") {\n     z.put(\"csv_header\", z.input(\"Header in CSV file\", \"true\").asInstanceOf[String])\n     z.put(\"inferSchema\", z.input(\"Infer schema\", \"true\").asInstanceOf[String])\n     z.put(\"mode\", z.select(\"Mode for bad records\", Seq((\"DROPMALFORMED\",\"DROPMALFORMED\"),(\"FAILFAST\",\"FAILFAST\"))).asInstanceOf[String])\n  }\n  val path = s\"s3a://$id:$secret@$bucket\"\n  z.put(\"path\", s\"$path\")\n  \n  println(s\"S3 path = $path\")\n  //z.run(\"20180507-221659_1464268700\")\n}\n}","user":"anonymous","dateUpdated":"2018-05-29T18:28:58+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"runOnSelectionChange":true,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"enabled":true},"settings":{"params":{"S3 access ID":"AKIAILHSQ3FINHV473RQ","S3 access secret":"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","S3 bucket location":"zeppelindemo/AirlineDataWithRowID","Header in CSV file":"true","Infer schema":"true","Mode for bad records":"DROPMALFORMED"},"forms":{"S3 access ID":{"name":"S3 access ID","displayName":"S3 access ID","type":"input","defaultValue":"AKIAILHSQ3FINHV473RQ","hidden":false,"$$hashKey":"object:5748"},"S3 access secret":{"name":"S3 access secret","displayName":"S3 access secret","type":"input","defaultValue":"Tnn6GOHhjaayIRtVNApYQgNLU3FxXkw9albr9hVJ","hidden":false,"$$hashKey":"object:5749"},"S3 bucket location":{"name":"S3 bucket location","displayName":"S3 bucket location","type":"input","defaultValue":"zeppelindemo/airportdata","hidden":false,"$$hashKey":"object:5750"}}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"S3 path = s3a://AKIAILHSQ3FINHV473RQ:Tnn6GOHhjaayIRtVNApYQgNLU3FxXkw9albr9hVJ@zeppelindemo/AirlineDataWithRowID\n"}]},"apps":[],"jobName":"paragraph_1525901513716_768694905","id":"20180507-214355_143278230","dateCreated":"2018-05-09T21:31:53+0000","dateStarted":"2018-05-29T18:28:58+0000","dateFinished":"2018-05-29T18:28:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5460"},{"title":"STEP 3: Connect to source, Infer Schema, register in SnappyData Catalog as External table","text":"%snappydata\n\n{\n  import org.apache.spark.sql._\n\n  var df: DataFrame = null\n\n  val sns = new org.apache.spark.sql.SnappySession(sc)\n  val path = z.get(\"path\")\n  val dataFormat = z.get(\"dataFormat\")\n  val datasetName = z.get(\"datasetName\")\n  \n  if ( dataFormat == \"CSV\") {\n      val csv_header = z.get(\"csv_header\")\n      val inferSchema = z.get(\"inferSchema\")\n      val mode = z.get(\"mode\")\n\n      //println( s\"$csv_header , $inferSchema, $mode, $path\")\n      sns.sql(s\"drop table if exists $datasetName\")\n      sns.sql(s\"create external table $datasetName using csv options( header '$csv_header', inferSchema '$inferSchema', mode '$mode', path '$path')\" )\n\n      df = sns.table(s\"$datasetName\")\n      println(\"------- INFERED SCHEMA ------- \")\n      df.printSchema\n      \n      println(\"------- SAMPLE DATA  ------- \")\n      z.show(df,10)\n  }\n  if ( dataFormat.equals(\"Parquet\")) {\n      //println(s\"Loading from path $path\")\n      sns.sql(s\"drop table if exists $datasetName\")\n      sns.sql(s\"create external table $datasetName using parquet options( path '$path')\" )\n\n      df = sns.table(s\"$datasetName\")\n      println(\"------- INFERED SCHEMA ------- \")\n      df.printSchema\n      println(\"------- SAMPLE DATA  ------- \")\n      z.show(df,10)\n  }\n  if (dataFormat == \"JSON\"){\n      sns.sql(s\"drop table if exists $datasetName\")\n      sns.sql(s\"create external table $datasetName using json options( path '$path')\" )\n\n      df = sns.table(s\"$datasetName\")\n      println(\"------- INFERED SCHEMA ------- \")\n      df.printSchema\n      println(\"------- SAMPLE DATA  ------- \")\n      z.show(df,10)\n  }\n  else { println(\"Data format not handled ...\") }\n}\n","user":"anonymous","dateUpdated":"2018-05-29T18:29:27+0000","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"------- INFERED SCHEMA ------- \nroot\n |-- YEAR_: integer (nullable = true)\n |-- MONTH_: integer (nullable = true)\n |-- DAYOFMONTH: integer (nullable = true)\n |-- DAYOFWEEK: integer (nullable = true)\n |-- UNIQUECARRIER: string (nullable = true)\n |-- TAILNUM: string (nullable = true)\n |-- FLIGHTNUM: integer (nullable = true)\n |-- ORIGIN: string (nullable = true)\n |-- DEST: string (nullable = true)\n |-- CRSDEPTIME: integer (nullable = true)\n |-- DEPTIME: integer (nullable = true)\n |-- DEPDELAY: double (nullable = true)\n |-- TAXIOUT: double (nullable = true)\n |-- TAXIIN: double (nullable = true)\n |-- CRSARRTIME: string (nullable = true)\n |-- ARRTIME: string (nullable = true)\n |-- ARRDELAY: double (nullable = true)\n |-- CANCELLED: string (nullable = true)\n |-- CANCELLATIONCODE: string (nullable = true)\n |-- DIVERTED: double (nullable = true)\n |-- CRSELAPSEDTIME: double (nullable = true)\n |-- ACTUALELAPSEDTIME: double (nullable = true)\n |-- AIRTIME: double (nullable = true)\n |-- DISTANCE: double (nullable = true)\n |-- CARRIERDELAY: string (nullable = true)\n |-- WEATHERDELAY: string (nullable = true)\n |-- NASDELAY: string (nullable = true)\n |-- SECURITYDELAY: string (nullable = true)\n |-- LATEAIRCRAFTDELAY: string (nullable = true)\n |-- ARRDELAYSLOT: string (nullable = true)\n |-- FlighTieStr: long (nullable = true)\n\n------- SAMPLE DATA  ------- \n"},{"type":"TABLE","data":"YEAR_\tMONTH_\tDAYOFMONTH\tDAYOFWEEK\tUNIQUECARRIER\tTAILNUM\tFLIGHTNUM\tORIGIN\tDEST\tCRSDEPTIME\tDEPTIME\tDEPDELAY\tTAXIOUT\tTAXIIN\tCRSARRTIME\tARRTIME\tARRDELAY\tCANCELLED\tCANCELLATIONCODE\tDIVERTED\tCRSELAPSEDTIME\tACTUALELAPSEDTIME\tAIRTIME\tDISTANCE\tCARRIERDELAY\tWEATHERDELAY\tNASDELAY\tSECURITYDELAY\tLATEAIRCRAFTDELAY\tARRDELAYSLOT\tFlighTieStr\n2006\t9\t15\t5\tDL\tN3744D\t1126\tTPA\tATL\t1655\t1654\t-1.0\t10.0\t18.0\t1833\t1830\t-3.0\t0.00\t\t0.0\t98.0\t96.0\t68.0\t406.0\t\t\t\t\t\t\t0\n2006\t9\t15\t5\tDL\tN961DL\t1077\tATL\tDFW\t1706\t1729\t23.0\t26.0\t6.0\t1825\t1848\t23.0\t0.00\t\t0.0\t139.0\t139.0\t107.0\t732.0\t23.00\t0.00\t0.00\t0.00\t0.00\t\t1\n2006\t9\t15\t5\tDL\tN121DE\t1260\tATL\tLGA\t1945\t2001\t16.0\t34.0\t21.0\t2207\t2236\t29.0\t0.00\t\t0.0\t142.0\t155.0\t100.0\t761.0\t0.00\t0.00\t29.00\t0.00\t0.00\t\t2\n2006\t9\t15\t5\tDL\tN695DA\t1117\tATL\tDFW\t800\t801\t1.0\t19.0\t11.0\t0912\t0925\t13.0\t0.00\t\t0.0\t132.0\t144.0\t114.0\t732.0\t\t\t\t\t\t\t3\n2006\t9\t15\t5\tDL\tN913DN\t1136\tOAK\tSLC\t1335\t1353\t18.0\t15.0\t6.0\t1613\t1634\t21.0\t0.00\t\t0.0\t98.0\t101.0\t80.0\t589.0\t0.00\t0.00\t3.00\t0.00\t18.00\t\t4\n2006\t9\t15\t5\tDL\tN913DL\t1299\tATL\tROC\t2054\t2158\t64.0\t11.0\t5.0\t2306\t2355\t49.0\t0.00\t\t0.0\t132.0\t117.0\t101.0\t749.0\t8.00\t0.00\t0.00\t0.00\t41.00\t\t5\n2006\t9\t15\t5\tDL\tN903DA\t965\tLAS\tSLC\t1414\t1443\t29.0\t91.0\t5.0\t1635\t1813\t98.0\t0.00\t\t0.0\t81.0\t150.0\t54.0\t368.0\t0.00\t0.00\t98.00\t0.00\t0.00\t\t6\n2006\t9\t15\t5\tDL\tN969DL\t944\tATL\tSDF\t1556\t1630\t34.0\t16.0\t3.0\t1714\t1742\t28.0\t0.00\t\t0.0\t78.0\t72.0\t53.0\t321.0\t28.00\t0.00\t0.00\t0.00\t0.00\t\t7\n2006\t9\t15\t5\tDL\tN682DA\t1243\tATL\tFLL\t1710\t1717\t7.0\t25.0\t47.0\t1902\t1957\t55.0\t0.00\t\t0.0\t112.0\t160.0\t88.0\t581.0\t7.00\t0.00\t48.00\t0.00\t0.00\t\t8\n2006\t9\t15\t5\tDL\tN901DL\t1232\tSAT\tATL\t600\t555\t-5.0\t11.0\t17.0\t0910\t0926\t16.0\t0.00\t\t0.0\t130.0\t151.0\t123.0\t874.0\t0.00\t0.00\t16.00\t0.00\t0.00\t\t9\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>Data format not handled ...\n"}]},"apps":[],"jobName":"paragraph_1525901513716_768694905","id":"20180507-221659_1464268700","dateCreated":"2018-05-09T21:31:53+0000","dateStarted":"2018-05-29T18:29:27+0000","dateFinished":"2018-05-29T18:29:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5461"},{"title":"STEP 4: Cache the external data in Snappy Column table","text":"%snappydata\n{\n  val sns = new org.apache.spark.sql.SnappySession(sc)\n  val datasetName = z.get(\"datasetName\")\n  val colTableName = datasetName+\"_cache\"\n  \n  sns.sql(s\"drop table if exists $colTableName\")\n  sns.sql(s\"create table $colTableName using column options(buckets '8') as (select * from $datasetName limit 20000000)\")\n  val df = sns.table(s\"$colTableName\")\n  println(s\"CREATED IN-MEMORY COLUMN TABLE $colTableName with row count = \" + df.count )\n}\n","user":"anonymous","dateUpdated":"2018-05-29T18:29:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1527101411995_1660044508","id":"20180523-185011_76116349","dateCreated":"2018-05-23T18:50:11+0000","dateStarted":"2018-05-24T05:37:36+0000","dateFinished":"2018-05-24T05:40:47+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5462"},{"text":"%snappydata.sql\n","user":"anonymous","dateUpdated":"2018-05-23T19:36:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1527104168799_1582818295","id":"20180523-193608_929081111","dateCreated":"2018-05-23T19:36:08+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5463"}],"name":"/data-sources/load-from-files(HDFS, GCS, Azure...)","id":"2DFQ1CCCW","angularObjects":{"2DFGHWXPN:shared_process":[],"2DEYD8B19:shared_process":[],"2DGDSJ1D5:shared_process":[],"2DG34J3Y6:shared_process":[],"2DDNFQDB7:shared_process":[],"2DFA98JQC:shared_process":[],"2DE61EQZN:shared_process":[],"2DFGBUBZ5:shared_process":[],"2DF4X3Y2C:shared_process":[],"2DFM5YCUE:existing_process":[],"2DGV2TNAM:shared_process":[],"2DHDSBT82:shared_process":[],"2DFD9J9HT:shared_process":[],"2DDFBQDPJ:shared_process":[],"2DFDVMJMR:shared_process":[],"2DFTVSKZM:shared_process":[],"2DDKZT2J3:shared_process":[],"2DFVEZS66:shared_process":[],"2DEUTJ3HW:shared_process":[],"2DDTTN674:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}